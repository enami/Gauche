dnl
dnl Configure ext/net
dnl This file is included by the toplevel configure.ac
dnl

# ext/net -------------------------------------------------

dnl
dnl process --enable-ipv6
dnl
dnl   Even if you specify --enable-ipv6, we'll check if they are
dnl   really available later, and disable the support if not.
dnl
AC_ARG_ENABLE(ipv6,
  AC_HELP_STRING([--enable-ipv6], [enable IPv6 support]),
  [
    case $enableval in
      no) enable_ipv6=no ;;
      *) enable_ipv6=yes ;;
    esac
  ], [enable_ipv6=yes])

dnl
dnl Checks availability of ipv6 support
dnl
if test $enable_ipv6 = yes; then
  AC_CACHE_CHECK([for IPv6], ac_cv_ipv6, [
  AC_TRY_COMPILE([
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#include <sys/socket.h>], [
  socket(AF_INET6, SOCK_STREAM, 0);
  ], ac_cv_ipv6=yes, ac_cv_ipv6=no)])
  if test "$ac_cv_ipv6" = yes; then
    AC_DEFINE(HAVE_IPV6,1,[Define if you have IPv6 support])
  fi
fi

dnl
dnl Check to see if the system provides sockaddr_storage
dnl
case "$target" in
 *mingw*)
   AC_CHECK_TYPES([struct sockaddr_storage],,,[#include <windows.h>]);;
 *)
   AC_CHECK_TYPES([struct sockaddr_storage],,,[#include <sys/socket.h>]);;
esac

dnl
dnl Check if net/if.h and struct ifreq
dnl
AC_CHECK_HEADERS(net/if.h,,,[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#include <sys/socket.h>
])
AC_CHECK_TYPES([struct ifreq],,,[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#include <sys/socket.h>
#ifdef HAVE_NET_IF_H
#include <net/if.h>
#endif
])

dnl
dnl Checks if sturct ifreq has ifr_ifindex and/or ifr_index field
dnl
AC_CHECK_MEMBERS([struct ifreq.ifr_ifindex,
                  struct ifreq.ifr_index],,,[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#include <sys/socket.h>
#ifdef HAVE_NET_IF_H
#include <net/if.h>
#endif
])

dnl
dnl Checks if sockaddr_in and sockaddr_in6 has *_len field
dnl
AC_CHECK_MEMBERS([struct sockaddr_un.sun_len],,,[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#include <sys/un.h>
])
AC_CHECK_MEMBERS([struct sockaddr_in.sin_len,
                  struct sockaddr_in6.sin6_len],,,[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#include <netinet/in.h>
])

dnl
dnl Check for some extra libraries
dnl
AC_SEARCH_LIBS(shutdown, socket)
AC_SEARCH_LIBS(gethostbyname_r, nsl)

dnl Check for reentrant version synopsis of netdb functions.
dnl   The calling synopsis of netdb functions like gethostbyname_r differ
dnl   among platforms.
dnl
dnl NB: The newer NetBSD has getprotobyname_r, getprotobynumber_r,
dnl getservbyname_r, and getservbyport_r for its internal use, but it's
dnl not supposed to be public.  configure happens to find these, so for
dnl the time being, we specifically disable checks for these functions
dnl on netbsd. (2004/5/31)
dnl
case "$target" in
  *-*-netbsd*)
    ac_cv_func_gethostbyname_r=no;;
  *)
    AC_CHECK_FUNC(gethostbyname_r)
esac
if test $ac_cv_func_gethostbyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for gethostbyname_r,
                 ac_cv_func_gethostbyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct hostent *h, *r; char buf[4096]; int len=4096; int err;
      (void)gethostbyname_r(n, h, buf, len, &r, &err);
      ], ac_cv_func_gethostbyname_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct hostent *h; char buf[4096]; int len=4096; int err;
      (void)gethostbyname_r(n, h, buf, len, &err);
      ], ac_cv_func_gethostbyname_r_nargs=5, [
    ac_cv_func_gethostbyname_r=no])])])
fi

if test $ac_cv_func_gethostbyname_r != no; then
  AC_DEFINE_UNQUOTED(GETHOSTBYNAME_R_NUMARGS, $ac_cv_func_gethostbyname_r_nargs, [Define number of args gethostbyname_r takes])
fi

dnl Kludge: DragonFly BSD's gethostbyaddr_r is broken
case "$target" in
  *-*-dragonfly*|*-*-netbsd*)
    ac_cv_func_gethostbyaddr_r='no';;
  *)
    AC_CHECK_FUNC(gethostbyaddr_r);;
esac
if test $ac_cv_func_gethostbyaddr_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for gethostbyaddr_r,
                 ac_cv_func_gethostbyaddr_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; int addrlen, type; struct hostent *h, *r; char buf[4096]; int len=4096; int err;
      (void)gethostbyaddr_r(n, addrlen, type, h, buf, len, &r, &err);
      ], ac_cv_func_gethostbyaddr_r_nargs=8, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; int addrlen, type; struct hostent *h; char buf[4096]; int len=4096; int err;
      (void)gethostbyaddr_r(n, addrlen, type, h, buf, len, &err);
      ], ac_cv_func_gethostbyaddr_r_nargs=7, [
    ac_cv_func_gethostbyaddr_r=no])])])
fi

if test $ac_cv_func_gethostbyaddr_r != no; then
  AC_DEFINE_UNQUOTED(GETHOSTBYADDR_R_NUMARGS, $ac_cv_func_gethostbyaddr_r_nargs, [Define number of args gethostbyaddr_r takes])
fi

dnl exclude netbsd.  see the comment above.
case "$target" in
  *-*-netbsd*)
    ac_cv_func_getprotobyname_r=no;;
  *)
    AC_CHECK_FUNC(getprotobyname_r);;
esac
if test $ac_cv_func_getprotobyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getprotobyname_r,
                 ac_cv_func_getprotobyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct protoent *h, *r; char buf[4096]; int len=4096;
      (void)getprotobyname_r(n, h, buf, len, &r);
      ], ac_cv_func_getprotobyname_r_nargs=5, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct protoent *h; char buf[4096]; int len=4096;
      (void)getprotobyname_r(n, h, buf, len);
      ], ac_cv_func_getprotobyname_r_nargs=4, [
    ac_cv_func_getprotobyname_r=no])])])
fi

if test $ac_cv_func_getprotobyname_r != no; then
  AC_DEFINE_UNQUOTED(GETPROTOBYNAME_R_NUMARGS, $ac_cv_func_getprotobyname_r_nargs, [Define number of args getprotobyname_r takes])
fi

dnl exclude netbsd.  see the comment above.
case "$target" in
  *-*-netbsd*)
    ac_cv_func_getprotobynumber_r=no;;
  *)
    AC_CHECK_FUNC(getprotobynumber_r);;
esac
if test $ac_cv_func_getprotobynumber_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getprotobynumber_r,
                 ac_cv_func_getprotobynumber_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; struct protoent *h, *r; char buf[4096]; int len=4096;
      (void)getprotobynumber_r(n, h, buf, len, &r);
      ], ac_cv_func_getprotobynumber_r_nargs=5, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; struct protoent *h; char buf[4096]; int len=4096;
      (void)getprotobynumber_r(n, h, buf, len);
      ], ac_cv_func_getprotobynumber_r_nargs=4, [
    ac_cv_func_getprotobynumber_r=no])])])
fi

if test $ac_cv_func_getprotobynumber_r != no; then
  AC_DEFINE_UNQUOTED(GETPROTOBYNUMBER_R_NUMARGS, $ac_cv_func_getprotobynumber_r_nargs, [Define number of args getprotobynumber_r takes])
fi

dnl exclude netbsd.  see the comment above.
case "$target" in
  *-*-netbsd*)
    ac_cv_func_getservbyname_r=no;;
  *)
    AC_CHECK_FUNC(getservbyname_r);;
esac
AC_CHECK_FUNC(getservbyname_r)
if test $ac_cv_func_getservbyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getservbyname_r,
                 ac_cv_func_getservbyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n, *p; struct servent *h, *r; char buf[4096]; int len=4096;
      (void)getservbyname_r(n, p, h, buf, len, &r);
      ], ac_cv_func_getservbyname_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n, *p; struct servent *h; char buf[4096]; int len=4096;
      (void)getservbyname_r(n, p, h, buf, len);
      ], ac_cv_func_getservbyname_r_nargs=5, [
    ac_cv_func_getservbyname_r=no])])])
fi

if test $ac_cv_func_getservbyname_r != no; then
  AC_DEFINE_UNQUOTED(GETSERVBYNAME_R_NUMARGS, $ac_cv_func_getservbyname_r_nargs, [Define number of args getservbyname_r takes])
fi

dnl exclude netbsd.  see the comment above.
case "$target" in
  *-*-netbsd*)
    ac_cv_func_getservbyport_r=no;;
  *)
    AC_CHECK_FUNC(getservbyport_r);;
esac
if test $ac_cv_func_getservbyport_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getservbyport_r,
                 ac_cv_func_getservbyport_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; char *p; struct servent *h, *r; char buf[4096]; int len=4096;
      (void)getservbyport_r(n, p, h, buf, len, &r);
      ], ac_cv_func_getservbyport_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; char *p; struct servent *h; char buf[4096]; int len=4096;
      (void)getservbyport_r(n, p, h, buf, len);
      ], ac_cv_func_getservbyport_r_nargs=5, [
    ac_cv_func_getservbyport_r=no])])])
fi

if test $ac_cv_func_getservbyport_r != no; then
  AC_DEFINE_UNQUOTED(GETSERVBYPORT_R_NUMARGS, $ac_cv_func_getservbyport_r_nargs, [Define number of args getservbyport_r takes])
fi

dnl Check for socklen_t
dnl Windows/MinGW is special and we know the answer, so we just don't
dnl bother checking it.
case "$target" in
  *mingw32*)
    LIBS="$LIBS -lws2_32"
    EXT_LIBS="$EXT_LIBS -lws2_32" ;;
  *)
    TYPE_SOCKLEN_T;;
esac

dnl Local variables:
dnl mode: autoconf
dnl end:
